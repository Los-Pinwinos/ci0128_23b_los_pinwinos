@page
<!-- Pagina que sigue el modelo de perfil -->
@model ModeloPerfil

@{
    ViewData["Title"] = "Perfil";
}

<!-- Metadata -->
<head>
    <!-- Titulo de la página -->
    <title>Perfil</title>
    <!-- Cargar el archivo JavaScript para alinear -->
    <script src="~/js/Pages/alinear.js"></script>
    <!-- Incluir el archivo de CSS con los estilos de la página -->
    <link rel="stylesheet" href="~/css/Pages/Cuenta/Perfil.css" asp-append-version="true" />
    <link rel="stylesheet" type="text/css" href="~/css/Pages/Shared/starability-growRotate.css" asp-append-version="true" />
</head>

<!-- Contenido de la página -->
<body>
    <!-- Forms para guardar la información escrita en las cajas de texto al presionar el botón "Crear cuenta" -->
    <form method="post">
        <!-- Configuración para la validación del lado del cliente -->
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
        <!-- Contenedor para todos los elementos en la página -->
        <div class="Perfil-contenedor-centrado-primario">
            <!-- Mensaje de error al no cumplir los atributos de validación del nombre de usuario del modelo vista -->
            <span asp-validation-for="usuarioActual.nombreDeUsuario" class="Perfil-texto-error"></span>
            <!-- Caja de texto para el nombre de usuario ligada al modelo vista -->
            <div class="Perfil-contenedor-caja-de-texto">
                <label asp-for="usuarioActual.nombreDeUsuario" for="CajaDeTextoUsuario">Usuario:</label>
                <input asp-for="usuarioActual.nombreDeUsuario" type="text" id="CajaDeTextoUsuario">
            </div>
            <!-- Mensaje de error al no cumplir los atributos de validación del correo del modelo vista -->
            <span asp-validation-for="usuarioActual.correo" class="Perfil-texto-error"></span>
            <!-- Caja de texto para el correo ligada al modelo vista -->
            <div class="Perfil-contenedor-caja-de-texto" style="margin-bottom: 2%;">
                <label asp-for="usuarioActual.correo" for="CajaDeTextoCorreo">Correo:</label>
                <input asp-for="usuarioActual.correo" type="email" id="CajaDeTextoCorreo" disabled>
            </div>
            <!-- Mensaje de error al no cumplir los atributos de validación del nombre de provincia del modelo vista -->
            <span asp-validation-for="usuarioActual.provinciaVivienda" class="Perfil-texto-error"></span>
            <!-- Caja de selección para la provincia ligada al modelo vista -->
            <div class="Perfil-contenedor-caja-de-texto">
                <label asp-for="usuarioActual.provinciaVivienda" for="CajaDeSeleccionProvincia">Provincia:</label>
                <select asp-for="usuarioActual.provinciaVivienda" id="CajaDeSeleccionProvincia">
                    <!-- Agregar todas las provincias como opciones -->
                    @foreach (var provincia in Model.provincias)
                    {
                        <option value="@provincia.nombre">@provincia.nombre</option>
                    }
                </select>
            </div>
            <!-- Mensaje de error al no cumplir los atributos de validación del nombre de cantón del modelo vista -->
            <span asp-validation-for="usuarioActual.cantonVivienda" class="Perfil-texto-error"></span>
            <!-- Caja de texto para el cantón (deshabilitada) ligada al modelo vista -->
            <div class="Perfil-contenedor-caja-de-texto">
                <label asp-for="usuarioActual.cantonVivienda" for="CajaDeSeleccionCanton">Cantón:</label>
                <select asp-for="usuarioActual.cantonVivienda" id="CajaDeSeleccionCanton">>
                    @foreach (var canton in Model.cantones)
                    {
                        <option value="@canton.nombre">@canton.nombre</option>
                    }
                </select>
            </div>
            <!-- Mensaje de error al no cumplir los atributos de validación del nombre de distrito del modelo vista -->
            <span asp-validation-for="usuarioActual.distritoVivienda" class="Perfil-texto-error"></span>
            <!-- Caja de texto para la distrito (deshabilitada) ligada al modelo vista -->
            <div class="Perfil-contenedor-caja-de-texto" style="margin-bottom: 2%;">
                <label asp-for="usuarioActual.distritoVivienda" for="CajaDeSeleccionDistrito">Distrito:</label>
                <select asp-for="usuarioActual.distritoVivienda" id="CajaDeSeleccionDistrito">>
                    @foreach (var distrito in Model.distritos)
                    {
                        <option value="@distrito.nombre">@distrito.nombre</option>
                    }
                </select>
            </div>
            <!-- Contenedor para mostrar la calificación del usuario -->
            <div class="Perfil-contenedor-calificacion" style="margin-right: @(130 - Model.cantidadAportes.ToString().Length * 10)px;">
                <label class="Perfil-contenedor-calificacion-titulo">Calificación:</label>
                <p class="starability-result" data-rating="@Math.Round(Model.usuario.calificacion)"></p>
                <p class="Perfil-contenedor-calificacion-calificacion">@Model.calificacionUsuario de 5,0</p>
                <p class="Perfil-contenedor-calificacion-conteo">(@Model.cantidadAportes)</p>
            </div>
            <!-- Botón para ver los aportes realizados por el usuario -->
            <a class="Perfil-boton-basico" href="/Cuenta/Aportes" style="margin-bottom: 1px;"> Ver aportes </a>
            <a class="Perfil-boton-basico" href="/Cuenta/Contrasena" style="margin-top: 10px;"> Cambiar contraseña </a>
            <!-- Botón para actualizar los datos del usuario -->
            <button class="Perfil-boton-basico" asp-page-handler="ActualizarUsuario" id="BotonGuardarCambios" style="display: none; margin-top: 3%;"> Guardar cambios </button>
        </div>
    </form>

    <!-- Inputs invisibles para guardar información original del usuario -->
    <input type="hidden" id="NombreDeUsuarioInicial" value="@Model.usuario.nombreDeUsuario" />
    <input type="hidden" id="ProvinciaInicial" value="@Model.usuario.provinciaVivienda" />
    <input type="hidden" id="CantonInicial" value="@Model.usuario.cantonVivienda" />
    <input type="hidden" id="DistritoInicial" value="@Model.usuario.distritoVivienda" />

    <!-- Script para alinear cajas de texto -->
    <script>
        // Llamar a la función para alinear los contenedores de las cajas de texto
        alinearContenedoresDeBarrasDeTexto(".Perfil-contenedor-caja-de-texto", 98);
    </script>

    <!-- Script para mostrar o esconder el botón de guardar cambios -->
    <script>
        // Función para verificar si ha habido cambios y ocultar o mostrar el botón
        function verificarCanbios() {
            // Obtener las cajas con los valores actuales
            var nombreUsuarioActual = document.getElementById('CajaDeTextoUsuario');
            var provinciaActual = document.getElementById('CajaDeSeleccionProvincia');
            var cantonActual = document.getElementById('CajaDeSeleccionCanton');
            var distritoActual = document.getElementById('CajaDeSeleccionDistrito');

            // Obtener las cajas con los valores originales
            var nombreUsuario = document.getElementById('NombreDeUsuarioInicial');
            var provincia = document.getElementById('ProvinciaInicial');
            var canton = document.getElementById('CantonInicial');
            var distrito = document.getElementById('DistritoInicial');

            // Obtener el botón de guardar
            var botonGuardar = document.getElementById('BotonGuardarCambios');

            // Si algo cambió con respecto al usuario
            // (En caso de cambiar el nombre de usuario, este debe tener logitud correcta)
            if ((nombreUsuarioActual.value !== nombreUsuario.value &&
                (nombreUsuarioActual.value.length >= 5 && nombreUsuarioActual.value.length <= 20)) ||
                provinciaActual.value !== provincia.value ||
                cantonActual.value !== canton.value ||
                distritoActual.value !== distrito.value) {
                // Mostrar el botón
                botonGuardar.style.display = 'block';
            // Si no hubo cambios
            } else {
                // Esconder el botón
                botonGuardar.style.display = 'none';
            }
        }

        // Obtener las cajas que pueden producir generar cambios
        const cajaNombreUsuario = document.getElementById('CajaDeTextoUsuario');
        const cajaProvincia = document.getElementById('CajaDeSeleccionProvincia');
        const cajaCanton = document.getElementById('CajaDeSeleccionCanton');
        const cajaDistrito = document.getElementById('CajaDeSeleccionDistrito');

        // Agregar event listeners en las cajas para verificar si se
        // producen cambios con respecto a la información del usuario
        cajaNombreUsuario.addEventListener('change', verificarCanbios);
        cajaProvincia.addEventListener('change', verificarCanbios);
        cajaCanton.addEventListener('change', verificarCanbios);
        cajaDistrito.addEventListener('change', verificarCanbios);
    </script>


    <!-- Script para mostrar popUp de error y redireccionar si se entra a la ventana
    sin estar loggeado-->
    <script>
        // Obtener el mensaje de redirección
        var mensaje = "@ViewData["Redireccionar"]";
        // Si existe un mensaje de redirección
        if (mensaje) {
            // Mostrar el popUp
            alert(mensaje);
            // Volver a la página de inicio
            window.location.href = "/Home/Index";
        }
    </script>

    <!-- Script para cambiar las opciones de las cajas de selección dinámicamente -->
    <script>
        // Obtiene las cajas de selección
        var cajaDeSeleccionProvincia = document.getElementById("CajaDeSeleccionProvincia");
        var cajaDeSeleccionCanton = document.getElementById("CajaDeSeleccionCanton");
        var cajaDeSeleccionDistrito = document.getElementById("CajaDeSeleccionDistrito");

        // Llamar a esta función cada vez que se produzca un cambio en
        // la caja de selección de cantón
        cajaDeSeleccionCanton.addEventListener("change", function () {
            // Obtener el cantón seleccionado
            var cantonSeleccionado = cajaDeSeleccionCanton.value;

            // Limpiar las opciones de la caja de selección de distrito
            cajaDeSeleccionDistrito.innerHTML = "";

            // Si se eligió un cantón
            if (cantonSeleccionado) {
                // Obtener la provincia seleccionada
                var provinciaSeleccionada = cajaDeSeleccionProvincia.value;
                // Usar el Fetch API para llamar al handler de DistritosPorCanton
                // con el cantón seleccionado
                fetch(`/Cuenta/Perfil?handler=DistritosPorCanton&provincia=${provinciaSeleccionada}&canton=${cantonSeleccionado}`)
                    .then(response => response.json())
                    .then(data => {
                        // Por cada distrito
                        data.forEach(distrito => {
                            // Crear una opción
                            var opcion = document.createElement("option");
                            // Establecer su valor y texto de mostrado
                            opcion.value = distrito.nombre;
                            opcion.text = distrito.nombre;
                            // Agregarla a la caja de selección de distrito
                            cajaDeSeleccionDistrito.appendChild(opcion);
                        });
                    });
            }
        });

        // Llamar a esta función cada vez que se produzca un cambio en
        // la caja de selección de provincia
        cajaDeSeleccionProvincia.addEventListener("change", async function () {
            // Obtener la provincia seleccionada
            var provinciaSeleccionada = cajaDeSeleccionProvincia.value;

            // Limpiar las opciones de las otras cajas de selección
            cajaDeSeleccionCanton.innerHTML = "";
            cajaDeSeleccionDistrito.innerHTML = "";

            // Si se eligió una provincia
            if (provinciaSeleccionada) {
                // Usar el Fetch API para llamar al handler de CantonesPorProvincia
                // con la provincia seleccionada
                await fetch(`/Cuenta/Perfil?handler=CantonesPorProvincia&provincia=${provinciaSeleccionada}`)
                    .then(response => response.json())
                    .then(data => {
                        // Por cada cantón
                        data.forEach(canton => {
                            // Crear una opción
                            var opcion = document.createElement("option");
                            // Establecer su valor y texto de mostrado
                            opcion.value = canton.nombre;
                            opcion.text = canton.nombre;
                            // Agregarla a la caja de selección de cantón
                            cajaDeSeleccionCanton.appendChild(opcion);
                        });
                    });
            }
            var event = new Event("change");
            cajaDeSeleccionCanton.dispatchEvent(event);
        });

    </script>

    <!-- Sección para realizar validaciones de los datos del lado del cliente -->
    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }
</body>